module class TestInlineHandlersNestedHandlerAllInline extends <root>#java#lang#Object, <root>#scala#ScalaObject {
  // fields:
  
  // methods
  def main(args: <root>#scala#Array[<root>#java#lang#String] (ARRAY[REF(class String)])): <root>#scala#Unit {
  locals: value args: ARRAY[REF(class String)], value temp11: REF(class Throwable), value temp12: REF(class MyException), value temp13: REF(class String), value message: REF(class String), value ex$4: REF(class Throwable), value temp14: REF(class Throwable), value temp15: REF(class MyException), value temp16: REF(class String), value message: REF(class String), value ex$5: REF(class Throwable), variable exc2: REF(class Throwable)
  startBlock: 1
  blocks: [1,15,16,22,18,19,2,11,12,13,21,4,5,6,20,3]
  
  1: pred: List() succs: List(15, 11, 4, 3) flags: <closed>
    160	LOAD_MODULE module Predef
    160	CONSTANT("TestInlineHandlersNestedHandlersOuterInline")
    160	CALL_METHOD scala.Predef.println (dynamic)
    161	SCOPE_ENTER variable result: INT
    161	JUMP 15
    
  15: pred: List(1) succs: List(11, 4, 3, 18, 16, 11, 4, 3) flags: <closed>
    165	LOAD_MODULE module Random
    165	CALL_METHOD scala.util.Random.nextInt (dynamic)
    165	CONSTANT(2)
    165	CALL_PRIMITIVE(Arithmetic(REM,INT))
    165	CONSTANT(0)
    165	CJUMP (INT)EQ ? 16 : 18
    
  16: pred: List(15) succs: List(11, 4, 3, 22, 4, 3) flags: <closed>
    166	NEW REF(class MyException)
    166	DUP(REF(class MyException))
    166	CONSTANT("something")
    166	CALL_METHOD MyException.<init> (static-instance)
    ?	STORE_LOCAL(value ex$4: REF(class Throwable))
    ?	JUMP 22
    
  22: pred: List(16) succs: List(4, 3, 13, 12, 4, 3) flags: <closed>
    164	LOAD_LOCAL(value ex$4: REF(class Throwable))
    164	STORE_LOCAL(value temp11: REF(class Throwable))
    164	SCOPE_ENTER value temp11: REF(class Throwable)
    164	LOAD_LOCAL(value ex$4: REF(class Throwable))
    164	IS_INSTANCE REF(class MyException)
    164	CZJUMP (BOOL)NE ? 12 : 13
    
  18: pred: List(15) succs: List(11, 4, 3, 19) flags: <closed>
    167	JUMP 19
    
  19: pred: List(18) succs: List(2) flags: <closed>
    178	LOAD_MODULE module Predef
    178	CONSTANT("finally")
    178	CALL_METHOD scala.Predef.println (dynamic)
    179	JUMP 2
    
  2: pred: List(19) succs: List() flags: <closed>
    182	SCOPE_EXIT variable result: INT
    182	RETURN(UNIT)
    
  11: pred: List(1, 15, 16, 18) succs: List(4, 3, 13, 12, 4, 3) flags: <closed> <exheader>
    164	LOAD_EXCEPTION(class Throwable)
    ?	DUP(REF(class Throwable))
    ?	STORE_LOCAL(value ex$4: REF(class Throwable))
    164	STORE_LOCAL(value temp11: REF(class Throwable))
    164	SCOPE_ENTER value temp11: REF(class Throwable)
    164	LOAD_LOCAL(value temp11: REF(class Throwable))
    164	IS_INSTANCE REF(class MyException)
    164	CZJUMP (BOOL)NE ? 12 : 13
    
  12: pred: List(22, 11) succs: List(4, 3, 21, 3) flags: <closed>
    164	LOAD_LOCAL(value temp11: REF(class Throwable))
    164	CHECK_CAST REF(class MyException)
    159	STORE_LOCAL(value temp12: REF(class MyException))
    159	SCOPE_ENTER value temp12: REF(class MyException)
    159	LOAD_LOCAL(value temp12: REF(class MyException))
    159	CALL_METHOD MyException.message (dynamic)
    159	STORE_LOCAL(value temp13: REF(class String))
    159	SCOPE_ENTER value temp13: REF(class String)
    169	LOAD_LOCAL(value temp13: REF(class String))
    169	STORE_LOCAL(value message: REF(class String))
    169	SCOPE_ENTER value message: REF(class String)
    170	LOAD_MODULE module Predef
    170	LOAD_LOCAL(value message: REF(class String))
    170	CALL_METHOD scala.Predef.println (dynamic)
    171	NEW REF(class MyException)
    171	DUP(REF(class MyException))
    171	LOAD_LOCAL(value message: REF(class String))
    171	CALL_METHOD MyException.<init> (static-instance)
    ?	STORE_LOCAL(value ex$5: REF(class Throwable))
    ?	JUMP 21
    
  13: pred: List(22, 11) succs: List(4, 3, 21, 3) flags: <closed>
    164	LOAD_LOCAL(value ex$4: REF(class Throwable))
    ?	STORE_LOCAL(value ex$5: REF(class Throwable))
    ?	JUMP 21
    
  21: pred: List(12, 13) succs: List(3, 6, 5, 3) flags: <closed>
    163	LOAD_LOCAL(value ex$5: REF(class Throwable))
    163	STORE_LOCAL(value temp14: REF(class Throwable))
    163	SCOPE_ENTER value temp14: REF(class Throwable)
    163	LOAD_LOCAL(value temp14: REF(class Throwable))
    163	IS_INSTANCE REF(class MyException)
    163	CZJUMP (BOOL)NE ? 5 : 6
    
  4: pred: List(1, 15, 16, 22, 18, 11, 12, 13) succs: List(3, 6, 5, 3) flags: <closed> <exheader>
    163	LOAD_EXCEPTION(class Throwable)
    ?	DUP(REF(class Throwable))
    ?	STORE_LOCAL(value ex$5: REF(class Throwable))
    163	STORE_LOCAL(value temp14: REF(class Throwable))
    163	SCOPE_ENTER value temp14: REF(class Throwable)
    163	LOAD_LOCAL(value temp14: REF(class Throwable))
    163	IS_INSTANCE REF(class MyException)
    163	CZJUMP (BOOL)NE ? 5 : 6
    
  5: pred: List(21, 4) succs: List(3, 20) flags: <closed>
    163	LOAD_LOCAL(value temp14: REF(class Throwable))
    163	CHECK_CAST REF(class MyException)
    159	STORE_LOCAL(value temp15: REF(class MyException))
    159	SCOPE_ENTER value temp15: REF(class MyException)
    159	LOAD_LOCAL(value temp15: REF(class MyException))
    159	CALL_METHOD MyException.message (dynamic)
    159	STORE_LOCAL(value temp16: REF(class String))
    159	SCOPE_ENTER value temp16: REF(class String)
    174	LOAD_LOCAL(value temp16: REF(class String))
    174	STORE_LOCAL(value message: REF(class String))
    174	SCOPE_ENTER value message: REF(class String)
    175	LOAD_MODULE module Predef
    175	LOAD_LOCAL(value message: REF(class String))
    175	CALL_METHOD scala.Predef.println (dynamic)
    176	NEW REF(class MyException)
    176	DUP(REF(class MyException))
    176	LOAD_LOCAL(value message: REF(class String))
    176	CALL_METHOD MyException.<init> (static-instance)
    ?	STORE_LOCAL(variable exc2: REF(class Throwable))
    ?	JUMP 20
    
  6: pred: List(21, 4) succs: List(3, 20) flags: <closed>
    163	LOAD_LOCAL(value ex$5: REF(class Throwable))
    ?	STORE_LOCAL(variable exc2: REF(class Throwable))
    ?	JUMP 20
    
  20: pred: List(5, 6) succs: List() flags: <closed>
    178	LOAD_MODULE module Predef
    178	CONSTANT("finally")
    178	CALL_METHOD scala.Predef.println (dynamic)
    179	LOAD_LOCAL(variable exc2: REF(class Throwable))
    179	THROW(Throwable)
    
  3: pred: List(1, 15, 16, 22, 18, 11, 12, 13, 21, 4, 5, 6) succs: List() flags: <closed> <exheader>
    177	LOAD_EXCEPTION(class Throwable)
    177	STORE_LOCAL(variable exc2: REF(class Throwable))
    178	LOAD_MODULE module Predef
    178	CONSTANT("finally")
    178	CALL_METHOD scala.Predef.println (dynamic)
    179	LOAD_LOCAL(variable exc2: REF(class Throwable))
    179	THROW(Throwable)
    
  }
  Exception handlers: 
    catch (Throwable) in List(15, 16, 18) starting at: 11
      consisting of blocks: List(14, 13, 12, 11)
      with finalizer: null
    catch (Throwable) in List(11, 12, 13, 14, 15, 16, 18, 22) starting at: 4
      consisting of blocks: List(7, 6, 5, 4)
      with finalizer: null
    catch (<none>) in List(4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 18, 21, 22) starting at: 3
      consisting of blocks: List(3)
      with finalizer: null
    
  def <init>(): object <root>#<empty>#TestInlineHandlersNestedHandlerAllInline {
  locals: 
  startBlock: 1
  blocks: [1]
  
  1: pred: List() succs: List() flags: <closed>
    157	THIS(TestInlineHandlersNestedHandlerAllInline)
    157	CALL_METHOD java.lang.Object.<init> (super())
    157	RETURN(UNIT)
    
  }
  Exception handlers: 
    
  
}
